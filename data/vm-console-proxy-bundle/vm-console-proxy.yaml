apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    control-plane: vm-console-proxy
  name: vm-console-proxy
  namespace: kubevirt
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: token.kubevirt.io:generate
rules:
- apiGroups:
  - token.kubevirt.io
  resources:
  - virtualmachines/vnc
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: vm-console-proxy
rules:
- apiGroups:
  - kubevirt.io
  resources:
  - virtualmachineinstances
  - virtualmachines
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - subresources.kubevirt.io
  resources:
  - virtualmachineinstances/vnc
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
  - patch
- apiGroups:
  - ""
  resources:
  - serviceaccounts/token
  verbs:
  - create
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - roles
  - rolebindings
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
  - patch
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: vm-console-proxy
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: vm-console-proxy
  namespace: kubevirt
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vm-console-proxy
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: vm-console-proxy
subjects:
- kind: ServiceAccount
  name: vm-console-proxy
  namespace: kubevirt
---
apiVersion: v1
data:
  tls-profile-v1alpha1.yaml: |
    type: Intermediate
    intermediate: {}
kind: ConfigMap
metadata:
  name: vm-console-proxy
  namespace: kubevirt
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.beta.openshift.io/serving-cert-secret-name: vm-console-proxy-cert
  name: vm-console-proxy
  namespace: kubevirt
spec:
  ports:
  - port: 443
    targetPort: api
  selector:
    vm-console-proxy.kubevirt.io: vm-console-proxy
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: vm-console-proxy
    vm-console-proxy.kubevirt.io: vm-console-proxy
  name: vm-console-proxy
  namespace: kubevirt
spec:
  replicas: 1
  selector:
    matchLabels:
      vm-console-proxy.kubevirt.io: vm-console-proxy
  template:
    metadata:
      labels:
        name: vm-console-proxy
        vm-console-proxy.kubevirt.io: vm-console-proxy
    spec:
      containers:
      - args: []
        command:
        - /console
        image: quay.io/kubevirt/vm-console-proxy:v0.5.0
        imagePullPolicy: Always
        name: console
        ports:
        - containerPort: 8768
          name: api
          protocol: TCP
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - mountPath: /config
          name: config
          readOnly: true
        - mountPath: /tmp/vm-console-proxy-cert
          name: vm-console-proxy-cert
          readOnly: true
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: vm-console-proxy
      terminationGracePeriodSeconds: 10
      volumes:
      - configMap:
          name: vm-console-proxy
        name: config
      - name: vm-console-proxy-cert
        secret:
          secretName: vm-console-proxy-cert
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  annotations:
    service.beta.openshift.io/inject-cabundle: "true"
  name: v1alpha1.token.kubevirt.io
spec:
  group: token.kubevirt.io
  groupPriorityMinimum: 2000
  service:
    name: vm-console-proxy
    namespace: kubevirt
    port: 443
  version: v1alpha1
  versionPriority: 10
